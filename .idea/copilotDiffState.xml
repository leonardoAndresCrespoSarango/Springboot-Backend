<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/user/src/main/java/com/etikos/user/security/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user/src/main/java/com/etikos/user/security/SecurityConfig.java" />
              <option name="originalContent" value="package com.etikos.user.security;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;import org.springframework.web.cors.CorsConfigurationSource;&#10;&#10;@Configuration&#10;public class SecurityConfig {&#10;&#10;    private final JwtTokenFilter jwtTokenFilter;&#10;    private final CorsConfigurationSource corsConfigurationSource;&#10;&#10;    public SecurityConfig(JwtTokenFilter jwtTokenFilter, CorsConfigurationSource corsConfigurationSource) {&#10;        this.jwtTokenFilter = jwtTokenFilter;&#10;        this.corsConfigurationSource = corsConfigurationSource;&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;&#10;    @Bean&#10;    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {&#10;        http&#10;                .cors(cors -&gt; cors.configurationSource(corsConfigurationSource))&#10;                .csrf(csrf -&gt; csrf.disable())&#10;                .sessionManagement(sm -&gt; sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#10;                .authorizeHttpRequests(auth -&gt; auth&#10;                        .requestMatchers(&#10;                                &quot;/users/register&quot;,&#10;                                &quot;/users/login&quot;,&#10;                                &quot;/users/password-reset&quot;,&#10;                                &quot;/users/audit/logout&quot;,&#10;                                &quot;/users/audit/login-failed&quot;&#10;                        ).permitAll()&#10;                        .anyRequest().authenticated()&#10;                )&#10;                .addFilterBefore(jwtTokenFilter, UsernamePasswordAuthenticationFilter.class);&#10;&#10;        return http.build();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.etikos.user.security;&#13;&#10;&#13;&#10;import org.springframework.context.annotation.Bean;&#13;&#10;import org.springframework.context.annotation.Configuration;&#13;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#13;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#13;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#13;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#13;&#10;import org.springframework.security.web.SecurityFilterChain;&#13;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#13;&#10;import org.springframework.web.cors.CorsConfigurationSource;&#13;&#10;&#13;&#10;@Configuration&#13;&#10;public class SecurityConfig {&#13;&#10;&#13;&#10;    private final JwtTokenFilter jwtTokenFilter;&#13;&#10;    private final CorsConfigurationSource corsConfigurationSource;&#13;&#10;&#13;&#10;    public SecurityConfig(JwtTokenFilter jwtTokenFilter, CorsConfigurationSource corsConfigurationSource) {&#13;&#10;        this.jwtTokenFilter = jwtTokenFilter;&#13;&#10;        this.corsConfigurationSource = corsConfigurationSource;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Bean&#13;&#10;    public PasswordEncoder passwordEncoder() {&#13;&#10;        return new BCryptPasswordEncoder();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Bean&#13;&#10;    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {&#13;&#10;        http&#13;&#10;                .cors(cors -&gt; cors.configurationSource(corsConfigurationSource))&#13;&#10;                .csrf(csrf -&gt; csrf.disable())&#13;&#10;                .sessionManagement(sm -&gt; sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#13;&#10;                .authorizeHttpRequests(auth -&gt; auth&#10;                        .requestMatchers(&#10;                                &quot;/users/register&quot;,&#10;                                &quot;/users/login&quot;,&#10;                                &quot;/users/login/biometric&quot;,&#10;                                &quot;/users/login/totp&quot;,&#10;                                &quot;/users/password-reset&quot;,&#10;                                &quot;/users/audit/logout&quot;,&#10;                                &quot;/users/audit/login-failed&quot;&#10;                        ).permitAll()&#10;                        .anyRequest().authenticated()&#10;                )&#13;&#10;                .addFilterBefore(jwtTokenFilter, UsernamePasswordAuthenticationFilter.class);&#13;&#10;&#13;&#10;        return http.build();&#13;&#10;    }&#13;&#10;}&#13;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>